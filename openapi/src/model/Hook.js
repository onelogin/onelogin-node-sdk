/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HookConditionsInner from './HookConditionsInner';
import HookOptions from './HookOptions';

/**
 * The Hook model module.
 * @module model/Hook
 * @version 0.0.1
 */
class Hook {
    /**
     * Constructs a new <code>Hook</code>.
     * @alias module:model/Hook
     * @param type {String} A string describing the type of hook. e.g. `pre-authentication`
     * @param disabled {Boolean} Boolean to enable or disable the hook. Disabled hooks will not run.
     * @param timeout {Number} The number of seconds to allow the hook function to run before before timing out. Maximum timeout varies based on the type of hook.
     * @param envVars {Array.<String>} Environment Variable objects that will be available via process.env.ENV_VAR_NAME in the hook code.
     * @param runtime {String} The Smart Hooks supported Node.js version to execute this hook with.
     * @param retries {Number} Number of retries if execution fails.
     * @param packages {Object} An object containing NPM packages that are bundled with the hook function.
     * @param _function {String} A base64 encoded string containing the javascript function code.
     */
    constructor(type, disabled, timeout, envVars, runtime, retries, packages, _function) { 
        
        Hook.initialize(this, type, disabled, timeout, envVars, runtime, retries, packages, _function);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, disabled, timeout, envVars, runtime, retries, packages, _function) { 
        obj['type'] = type;
        obj['disabled'] = disabled || true;
        obj['timeout'] = timeout || 1;
        obj['env_vars'] = envVars;
        obj['runtime'] = runtime;
        obj['retries'] = retries || 0;
        obj['packages'] = packages;
        obj['function'] = _function;
    }

    /**
     * Constructs a <code>Hook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hook} obj Optional instance to populate.
     * @return {module:model/Hook} The populated <code>Hook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hook();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('env_vars')) {
                obj['env_vars'] = ApiClient.convertToType(data['env_vars'], ['String']);
            }
            if (data.hasOwnProperty('runtime')) {
                obj['runtime'] = ApiClient.convertToType(data['runtime'], 'String');
            }
            if (data.hasOwnProperty('retries')) {
                obj['retries'] = ApiClient.convertToType(data['retries'], 'Number');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], Object);
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
            if (data.hasOwnProperty('context_version')) {
                obj['context_version'] = ApiClient.convertToType(data['context_version'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = HookOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [HookConditionsInner]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The Hook unique ID in OneLogin.
 * @member {String} id
 */
Hook.prototype['id'] = undefined;

/**
 * A string describing the type of hook. e.g. `pre-authentication`
 * @member {String} type
 */
Hook.prototype['type'] = undefined;

/**
 * Boolean to enable or disable the hook. Disabled hooks will not run.
 * @member {Boolean} disabled
 * @default true
 */
Hook.prototype['disabled'] = true;

/**
 * The number of seconds to allow the hook function to run before before timing out. Maximum timeout varies based on the type of hook.
 * @member {Number} timeout
 * @default 1
 */
Hook.prototype['timeout'] = 1;

/**
 * Environment Variable objects that will be available via process.env.ENV_VAR_NAME in the hook code.
 * @member {Array.<String>} env_vars
 */
Hook.prototype['env_vars'] = undefined;

/**
 * The Smart Hooks supported Node.js version to execute this hook with.
 * @member {String} runtime
 */
Hook.prototype['runtime'] = undefined;

/**
 * Number of retries if execution fails.
 * @member {Number} retries
 * @default 0
 */
Hook.prototype['retries'] = 0;

/**
 * An object containing NPM packages that are bundled with the hook function.
 * @member {Object} packages
 */
Hook.prototype['packages'] = undefined;

/**
 * A base64 encoded string containing the javascript function code.
 * @member {String} function
 */
Hook.prototype['function'] = undefined;

/**
 * The semantic version of the content that will be injected into this hook.
 * @member {String} context_version
 */
Hook.prototype['context_version'] = undefined;

/**
 * String describing the state of the hook function. When a hook is ready and disabled is false it will be executed.
 * @member {module:model/Hook.StatusEnum} status
 */
Hook.prototype['status'] = undefined;

/**
 * @member {module:model/HookOptions} options
 */
Hook.prototype['options'] = undefined;

/**
 * An array of objects that let you limit the execution of a hook to users in specific roles.
 * @member {Array.<module:model/HookConditionsInner>} conditions
 */
Hook.prototype['conditions'] = undefined;

/**
 * ISO8601 format date that they hook function was created.
 * @member {String} created_at
 */
Hook.prototype['created_at'] = undefined;

/**
 * ISO8601 format date that they hook function was last updated.
 * @member {String} updated_at
 */
Hook.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Hook['StatusEnum'] = {

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready",

    /**
     * value: "create-queued"
     * @const
     */
    "create-queued": "create-queued",

    /**
     * value: "create-running"
     * @const
     */
    "create-running": "create-running",

    /**
     * value: "create-failed"
     * @const
     */
    "create-failed": "create-failed",

    /**
     * value: "update-queued"
     * @const
     */
    "update-queued": "update-queued",

    /**
     * value: "update-running"
     * @const
     */
    "update-running": "update-running",

    /**
     * value: "update-failed"
     * @const
     */
    "update-failed": "update-failed"
};



export default Hook;

