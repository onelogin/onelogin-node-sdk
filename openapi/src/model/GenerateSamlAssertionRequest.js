/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GenerateSamlAssertionRequest model module.
 * @module model/GenerateSamlAssertionRequest
 * @version 0.0.1
 */
class GenerateSamlAssertionRequest {
    /**
     * Constructs a new <code>GenerateSamlAssertionRequest</code>.
     * @alias module:model/GenerateSamlAssertionRequest
     * @param usernameOrEmail {String} Set this to the username or email of the OneLogin user accessing the app for which you want to generate a SAML token.
     * @param password {String} Password of the OneLogin user accessing the app for which you want to generate a SAML token.
     * @param appId {String} App ID of the app for which you want to generate a SAML token. This is the app ID in OneLogin.
     * @param subdomain {String} Set to the subdomain of the OneLogin user accessing the app for which you want to generate a SAML token.
     */
    constructor(usernameOrEmail, password, appId, subdomain) { 
        
        GenerateSamlAssertionRequest.initialize(this, usernameOrEmail, password, appId, subdomain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, usernameOrEmail, password, appId, subdomain) { 
        obj['username_or_email'] = usernameOrEmail;
        obj['password'] = password;
        obj['app_id'] = appId;
        obj['subdomain'] = subdomain;
    }

    /**
     * Constructs a <code>GenerateSamlAssertionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenerateSamlAssertionRequest} obj Optional instance to populate.
     * @return {module:model/GenerateSamlAssertionRequest} The populated <code>GenerateSamlAssertionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenerateSamlAssertionRequest();

            if (data.hasOwnProperty('username_or_email')) {
                obj['username_or_email'] = ApiClient.convertToType(data['username_or_email'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('subdomain')) {
                obj['subdomain'] = ApiClient.convertToType(data['subdomain'], 'String');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Set this to the username or email of the OneLogin user accessing the app for which you want to generate a SAML token.
 * @member {String} username_or_email
 */
GenerateSamlAssertionRequest.prototype['username_or_email'] = undefined;

/**
 * Password of the OneLogin user accessing the app for which you want to generate a SAML token.
 * @member {String} password
 */
GenerateSamlAssertionRequest.prototype['password'] = undefined;

/**
 * App ID of the app for which you want to generate a SAML token. This is the app ID in OneLogin.
 * @member {String} app_id
 */
GenerateSamlAssertionRequest.prototype['app_id'] = undefined;

/**
 * Set to the subdomain of the OneLogin user accessing the app for which you want to generate a SAML token.
 * @member {String} subdomain
 */
GenerateSamlAssertionRequest.prototype['subdomain'] = undefined;

/**
 * Whitelisted IP address, if MFA is required and you need to honor IP address whitelisting defined in MFA policies.
 * @member {String} ip_address
 */
GenerateSamlAssertionRequest.prototype['ip_address'] = undefined;






export default GenerateSamlAssertionRequest;

