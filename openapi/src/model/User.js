/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 0.0.1
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('role_ids')) {
                obj['role_ids'] = ApiClient.convertToType(data['role_ids'], ['Number']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('directory_id')) {
                obj['directory_id'] = ApiClient.convertToType(data['directory_id'], 'Number');
            }
            if (data.hasOwnProperty('trusted_idp_id')) {
                obj['trusted_idp_id'] = ApiClient.convertToType(data['trusted_idp_id'], 'Number');
            }
            if (data.hasOwnProperty('manager_ad_id')) {
                obj['manager_ad_id'] = ApiClient.convertToType(data['manager_ad_id'], 'String');
            }
            if (data.hasOwnProperty('manager_user_id')) {
                obj['manager_user_id'] = ApiClient.convertToType(data['manager_user_id'], 'String');
            }
            if (data.hasOwnProperty('samaccount_name')) {
                obj['samaccount_name'] = ApiClient.convertToType(data['samaccount_name'], 'String');
            }
            if (data.hasOwnProperty('member_of')) {
                obj['member_of'] = ApiClient.convertToType(data['member_of'], 'String');
            }
            if (data.hasOwnProperty('userprincipalname')) {
                obj['userprincipalname'] = ApiClient.convertToType(data['userprincipalname'], 'String');
            }
            if (data.hasOwnProperty('distinguished_name')) {
                obj['distinguished_name'] = ApiClient.convertToType(data['distinguished_name'], 'String');
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
            }
            if (data.hasOwnProperty('activated_at')) {
                obj['activated_at'] = ApiClient.convertToType(data['activated_at'], 'String');
            }
            if (data.hasOwnProperty('last_login')) {
                obj['last_login'] = ApiClient.convertToType(data['last_login'], 'String');
            }
            if (data.hasOwnProperty('invitation_sent_at')) {
                obj['invitation_sent_at'] = ApiClient.convertToType(data['invitation_sent_at'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('preferred_locale_code')) {
                obj['preferred_locale_code'] = ApiClient.convertToType(data['preferred_locale_code'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('custom_attributes')) {
                obj['custom_attributes'] = ApiClient.convertToType(data['custom_attributes'], Object);
            }
            if (data.hasOwnProperty('invalid_login_attempts')) {
                obj['invalid_login_attempts'] = ApiClient.convertToType(data['invalid_login_attempts'], 'Number');
            }
            if (data.hasOwnProperty('locked_until')) {
                obj['locked_until'] = ApiClient.convertToType(data['locked_until'], 'String');
            }
            if (data.hasOwnProperty('password_changed_at')) {
                obj['password_changed_at'] = ApiClient.convertToType(data['password_changed_at'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('password_confirmation')) {
                obj['password_confirmation'] = ApiClient.convertToType(data['password_confirmation'], 'String');
            }
            if (data.hasOwnProperty('password_algorithm')) {
                obj['password_algorithm'] = ApiClient.convertToType(data['password_algorithm'], 'String');
            }
            if (data.hasOwnProperty('salt')) {
                obj['salt'] = ApiClient.convertToType(data['salt'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * A username for the user.
 * @member {String} username
 */
User.prototype['username'] = undefined;

/**
 * A valid email for the user.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * The user's first name.
 * @member {String} firstname
 */
User.prototype['firstname'] = undefined;

/**
 * The user's last name.
 * @member {String} lastname
 */
User.prototype['lastname'] = undefined;

/**
 * The user's job title.
 * @member {String} title
 */
User.prototype['title'] = undefined;

/**
 * The user's department.
 * @member {String} department
 */
User.prototype['department'] = undefined;

/**
 * The user's company.
 * @member {String} company
 */
User.prototype['company'] = undefined;

/**
 * Free text related to the user.
 * @member {String} comment
 */
User.prototype['comment'] = undefined;

/**
 * The ID of the Group in OneLogin that the user is assigned to.
 * @member {Number} group_id
 */
User.prototype['group_id'] = undefined;

/**
 * A list of OneLogin Role IDs of the user
 * @member {Array.<Number>} role_ids
 */
User.prototype['role_ids'] = undefined;

/**
 * The E.164 format phone number for a user.
 * @member {String} phone
 */
User.prototype['phone'] = undefined;

/**
 * @member {module:model/User.StateEnum} state
 */
User.prototype['state'] = undefined;

/**
 * @member {module:model/User.StatusEnum} status
 */
User.prototype['status'] = undefined;

/**
 * The ID of the OneLogin Directory of the user.
 * @member {Number} directory_id
 */
User.prototype['directory_id'] = undefined;

/**
 * The ID of the OneLogin Trusted IDP of the user.
 * @member {Number} trusted_idp_id
 */
User.prototype['trusted_idp_id'] = undefined;

/**
 * The ID of the user's manager in Active Directory.
 * @member {String} manager_ad_id
 */
User.prototype['manager_ad_id'] = undefined;

/**
 * The OneLogin User ID for the user's manager.
 * @member {String} manager_user_id
 */
User.prototype['manager_user_id'] = undefined;

/**
 * The user's Active Directory username.
 * @member {String} samaccount_name
 */
User.prototype['samaccount_name'] = undefined;

/**
 * The user's directory membership.
 * @member {String} member_of
 */
User.prototype['member_of'] = undefined;

/**
 * The principle name of the user.
 * @member {String} userprincipalname
 */
User.prototype['userprincipalname'] = undefined;

/**
 * The distinguished name of the user.
 * @member {String} distinguished_name
 */
User.prototype['distinguished_name'] = undefined;

/**
 * The ID of the user in an external directory.
 * @member {String} external_id
 */
User.prototype['external_id'] = undefined;

/**
 * @member {String} activated_at
 */
User.prototype['activated_at'] = undefined;

/**
 * @member {String} last_login
 */
User.prototype['last_login'] = undefined;

/**
 * @member {String} invitation_sent_at
 */
User.prototype['invitation_sent_at'] = undefined;

/**
 * @member {String} updated_at
 */
User.prototype['updated_at'] = undefined;

/**
 * @member {String} preferred_locale_code
 */
User.prototype['preferred_locale_code'] = undefined;

/**
 * @member {String} created_at
 */
User.prototype['created_at'] = undefined;

/**
 * @member {Object} custom_attributes
 */
User.prototype['custom_attributes'] = undefined;

/**
 * @member {Number} invalid_login_attempts
 */
User.prototype['invalid_login_attempts'] = undefined;

/**
 * @member {String} locked_until
 */
User.prototype['locked_until'] = undefined;

/**
 * @member {String} password_changed_at
 */
User.prototype['password_changed_at'] = undefined;

/**
 * The password to set for a user.
 * @member {String} password
 */
User.prototype['password'] = undefined;

/**
 * Required if the password is being set.
 * @member {String} password_confirmation
 */
User.prototype['password_confirmation'] = undefined;

/**
 * Use this when importing a password that's already hashed. Prepend the salt value to the cleartext password value before SHA-256-encoding it
 * @member {String} password_algorithm
 */
User.prototype['password_algorithm'] = undefined;

/**
 * The salt value used with the password_algorithm.
 * @member {String} salt
 */
User.prototype['salt'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {Number}
 * @readonly
 */
User['StateEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
User['StatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8
};



export default User;

