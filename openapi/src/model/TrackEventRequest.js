/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RiskDevice from './RiskDevice';
import RiskUser from './RiskUser';
import Session from './Session';
import Source from './Source';

/**
 * The TrackEventRequest model module.
 * @module model/TrackEventRequest
 * @version 0.0.1
 */
class TrackEventRequest {
    /**
     * Constructs a new <code>TrackEventRequest</code>.
     * @alias module:model/TrackEventRequest
     * @param verb {String} Verbs are used to distinguish between different types of events.
     * @param ip {String} The IP address of the User's request.
     * @param userAgent {String} The user agent of the User's request.
     * @param user {module:model/RiskUser} 
     */
    constructor(verb, ip, userAgent, user) { 
        
        TrackEventRequest.initialize(this, verb, ip, userAgent, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, verb, ip, userAgent, user) { 
        obj['verb'] = verb;
        obj['ip'] = ip;
        obj['user_agent'] = userAgent;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>TrackEventRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackEventRequest} obj Optional instance to populate.
     * @return {module:model/TrackEventRequest} The populated <code>TrackEventRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackEventRequest();

            if (data.hasOwnProperty('verb')) {
                obj['verb'] = ApiClient.convertToType(data['verb'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('user_agent')) {
                obj['user_agent'] = ApiClient.convertToType(data['user_agent'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = RiskUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = Session.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = RiskDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('fp')) {
                obj['fp'] = ApiClient.convertToType(data['fp'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Verbs are used to distinguish between different types of events.
 * @member {String} verb
 */
TrackEventRequest.prototype['verb'] = undefined;

/**
 * The IP address of the User's request.
 * @member {String} ip
 */
TrackEventRequest.prototype['ip'] = undefined;

/**
 * The user agent of the User's request.
 * @member {String} user_agent
 */
TrackEventRequest.prototype['user_agent'] = undefined;

/**
 * @member {module:model/RiskUser} user
 */
TrackEventRequest.prototype['user'] = undefined;

/**
 * @member {module:model/Source} source
 */
TrackEventRequest.prototype['source'] = undefined;

/**
 * @member {module:model/Session} session
 */
TrackEventRequest.prototype['session'] = undefined;

/**
 * @member {module:model/RiskDevice} device
 */
TrackEventRequest.prototype['device'] = undefined;

/**
 * Set to the value of the __tdli_fp cookie.
 * @member {String} fp
 */
TrackEventRequest.prototype['fp'] = undefined;

/**
 * Date and time of the event in IS08601 format. Useful for preloading old events. Defaults to date time this API request is received.
 * @member {String} published
 */
TrackEventRequest.prototype['published'] = undefined;






export default TrackEventRequest;

