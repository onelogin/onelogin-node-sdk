/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactorInnerFactorData from './FactorInnerFactorData';

/**
 * The FactorInner model module.
 * @module model/FactorInner
 * @version 0.0.1
 */
class FactorInner {
    /**
     * Constructs a new <code>FactorInner</code>.
     * @alias module:model/FactorInner
     */
    constructor() { 
        
        FactorInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FactorInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactorInner} obj Optional instance to populate.
     * @return {module:model/FactorInner} The populated <code>FactorInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactorInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('auth_factor_name')) {
                obj['auth_factor_name'] = ApiClient.convertToType(data['auth_factor_name'], 'String');
            }
            if (data.hasOwnProperty('type_display_name')) {
                obj['type_display_name'] = ApiClient.convertToType(data['type_display_name'], 'String');
            }
            if (data.hasOwnProperty('user_display_name')) {
                obj['user_display_name'] = ApiClient.convertToType(data['user_display_name'], 'String');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('factor_data')) {
                obj['factor_data'] = FactorInnerFactorData.constructFromObject(data['factor_data']);
            }
        }
        return obj;
    }


}

/**
 * MFA device identifier.
 * @member {String} id
 */
FactorInner.prototype['id'] = undefined;

/**
 * accepted : factor has been verified. pending: registered but has not been verified.
 * @member {module:model/FactorInner.StatusEnum} status
 */
FactorInner.prototype['status'] = undefined;

/**
 * True = is user's default MFA device for OneLogin.
 * @member {Boolean} default
 */
FactorInner.prototype['default'] = undefined;

/**
 * \"Official\" authentication factor name, as it appears to administrators in OneLogin.
 * @member {String} auth_factor_name
 */
FactorInner.prototype['auth_factor_name'] = undefined;

/**
 * Authentication factor display name as it appears to users upon initial registration, as defined by admins at Settings > Authentication Factors.
 * @member {String} type_display_name
 */
FactorInner.prototype['type_display_name'] = undefined;

/**
 * Authentication factor display name assigned by users when they enroll the device.
 * @member {String} user_display_name
 */
FactorInner.prototype['user_display_name'] = undefined;

/**
 * A short lived token that is required to Verify the Factor. This token expires based on the expires_in parameter passed in.
 * @member {String} expires_at
 */
FactorInner.prototype['expires_at'] = undefined;

/**
 * @member {module:model/FactorInnerFactorData} factor_data
 */
FactorInner.prototype['factor_data'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FactorInner['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted"
};



export default FactorInner;

