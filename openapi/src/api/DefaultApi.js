/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivateFactorRequest from '../model/ActivateFactorRequest';
import AddAccessTokenClaimRequest from '../model/AddAccessTokenClaimRequest';
import AddClientAppRequest from '../model/AddClientAppRequest';
import AddRoleUsers200ResponseInner from '../model/AddRoleUsers200ResponseInner';
import AddScopeRequest from '../model/AddScopeRequest';
import AuthMethod from '../model/AuthMethod';
import ClientApp from '../model/ClientApp';
import Connector from '../model/Connector';
import CreateAuthorizationServerRequest from '../model/CreateAuthorizationServerRequest';
import CreateEnvironmentVariableRequest from '../model/CreateEnvironmentVariableRequest';
import CreateRoles201ResponseInner from '../model/CreateRoles201ResponseInner';
import Device from '../model/Device';
import EnrollFactorRequest from '../model/EnrollFactorRequest';
import Envvar from '../model/Envvar';
import ErrorStatus from '../model/ErrorStatus';
import FactorInner from '../model/FactorInner';
import GenerateMfaToken200Response from '../model/GenerateMfaToken200Response';
import GenerateMfaToken422Response from '../model/GenerateMfaToken422Response';
import GenerateMfaTokenRequest from '../model/GenerateMfaTokenRequest';
import GenerateSamlAssertionRequest from '../model/GenerateSamlAssertionRequest';
import GenerateToken200Response from '../model/GenerateToken200Response';
import GenerateToken400Response from '../model/GenerateToken400Response';
import GenerateTokenRequest from '../model/GenerateTokenRequest';
import GetAuthorizationServer200Response from '../model/GetAuthorizationServer200Response';
import GetAvailableFactors200ResponseInner from '../model/GetAvailableFactors200ResponseInner';
import GetClientApps200ResponseInner from '../model/GetClientApps200ResponseInner';
import GetRateLimit200Response from '../model/GetRateLimit200Response';
import GetRiskScore200Response from '../model/GetRiskScore200Response';
import GetRiskScore400Response from '../model/GetRiskScore400Response';
import GetRiskScoreRequest from '../model/GetRiskScoreRequest';
import GetScoreInsights200Response from '../model/GetScoreInsights200Response';
import GetUserApps200ResponseInner from '../model/GetUserApps200ResponseInner';
import Hook from '../model/Hook';
import HookStatus from '../model/HookStatus';
import Id from '../model/Id';
import ListAccessTokenClaims200ResponseInner from '../model/ListAccessTokenClaims200ResponseInner';
import ListActions200ResponseInner from '../model/ListActions200ResponseInner';
import ListAppUsers200ResponseInner from '../model/ListAppUsers200ResponseInner';
import ListAuthorizationServers200ResponseInner from '../model/ListAuthorizationServers200ResponseInner';
import ListConditionOperators200ResponseInner from '../model/ListConditionOperators200ResponseInner';
import ListConditionValues200ResponseInner from '../model/ListConditionValues200ResponseInner';
import ListConditions200ResponseInner from '../model/ListConditions200ResponseInner';
import ListMappingConditionOperators200ResponseInner from '../model/ListMappingConditionOperators200ResponseInner';
import ListMappingConditions200ResponseInner from '../model/ListMappingConditions200ResponseInner';
import ListScopes200ResponseInner from '../model/ListScopes200ResponseInner';
import Log from '../model/Log';
import Mapping from '../model/Mapping';
import Registration from '../model/Registration';
import RemoveRoleUsersRequest from '../model/RemoveRoleUsersRequest';
import RevokeTokenRequest from '../model/RevokeTokenRequest';
import RiskRule from '../model/RiskRule';
import Role from '../model/Role';
import Rule from '../model/Rule';
import RuleId from '../model/RuleId';
import Schema from '../model/Schema';
import Schema1 from '../model/Schema1';
import SetRoleApps200ResponseInner from '../model/SetRoleApps200ResponseInner';
import Status1 from '../model/Status1';
import Status2 from '../model/Status2';
import TrackEventRequest from '../model/TrackEventRequest';
import UpdateAuthorizationServer400Response from '../model/UpdateAuthorizationServer400Response';
import UpdateClientAppRequest from '../model/UpdateClientAppRequest';
import UpdateEnvironmentVariableRequest from '../model/UpdateEnvironmentVariableRequest';
import UpdateRole200Response from '../model/UpdateRole200Response';
import User from '../model/User';
import VerifyEnrollmentRequest from '../model/VerifyEnrollmentRequest';
import VerifyFactorRequest from '../model/VerifyFactorRequest';
import VerifyFactorSaml200Response from '../model/VerifyFactorSaml200Response';
import VerifyFactorSamlRequest from '../model/VerifyFactorSamlRequest';
import VerifyFactorVoice200ResponseInner from '../model/VerifyFactorVoice200ResponseInner';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateFactor operation.
     * @callback module:api/DefaultApi~activateFactorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {module:model/ActivateFactorRequest} activateFactorRequest 
     * @param {module:api/DefaultApi~activateFactorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateFactor(authorization, userId, activateFactorRequest, callback) {
      let postBody = activateFactorRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling activateFactor");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling activateFactor");
      }
      // verify the required parameter 'activateFactorRequest' is set
      if (activateFactorRequest === undefined || activateFactorRequest === null) {
        throw new Error("Missing the required parameter 'activateFactorRequest' when calling activateFactor");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/verifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAccessTokenClaim operation.
     * @callback module:api/DefaultApi~addAccessTokenClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:model/AddAccessTokenClaimRequest} addAccessTokenClaimRequest 
     * @param {module:api/DefaultApi~addAccessTokenClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    addAccessTokenClaim(authorization, id, addAccessTokenClaimRequest, callback) {
      let postBody = addAccessTokenClaimRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addAccessTokenClaim");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAccessTokenClaim");
      }
      // verify the required parameter 'addAccessTokenClaimRequest' is set
      if (addAccessTokenClaimRequest === undefined || addAccessTokenClaimRequest === null) {
        throw new Error("Missing the required parameter 'addAccessTokenClaimRequest' when calling addAccessTokenClaim");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Id;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/claims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addClientApp operation.
     * @callback module:api/DefaultApi~addClientAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:model/AddClientAppRequest} addClientAppRequest 
     * @param {module:api/DefaultApi~addClientAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientApp}
     */
    addClientApp(authorization, id, addClientAppRequest, callback) {
      let postBody = addClientAppRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addClientApp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addClientApp");
      }
      // verify the required parameter 'addClientAppRequest' is set
      if (addClientAppRequest === undefined || addClientAppRequest === null) {
        throw new Error("Missing the required parameter 'addClientAppRequest' when calling addClientApp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientApp;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRoleAdmins operation.
     * @callback module:api/DefaultApi~addRoleAdminsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddRoleUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {Array.<Number>} requestBody 
     * @param {module:api/DefaultApi~addRoleAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddRoleUsers200ResponseInner>}
     */
    addRoleAdmins(authorization, roleId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addRoleAdmins");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling addRoleAdmins");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling addRoleAdmins");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AddRoleUsers200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/admins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRoleUsers operation.
     * @callback module:api/DefaultApi~addRoleUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddRoleUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {Array.<Number>} requestBody 
     * @param {module:api/DefaultApi~addRoleUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddRoleUsers200ResponseInner>}
     */
    addRoleUsers(authorization, roleId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addRoleUsers");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling addRoleUsers");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling addRoleUsers");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AddRoleUsers200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addScope operation.
     * @callback module:api/DefaultApi~addScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:model/AddScopeRequest} addScopeRequest 
     * @param {module:api/DefaultApi~addScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    addScope(authorization, id, addScopeRequest, callback) {
      let postBody = addScopeRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addScope");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addScope");
      }
      // verify the required parameter 'addScopeRequest' is set
      if (addScopeRequest === undefined || addScopeRequest === null) {
        throw new Error("Missing the required parameter 'addScopeRequest' when calling addScope");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Id;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/scopes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkMappingSort operation.
     * @callback module:api/DefaultApi~bulkMappingSortCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Array.<Number>} requestBody The request body must contain an array of User Mapping IDs in the desired order.
     * @param {module:api/DefaultApi~bulkMappingSortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    bulkMappingSort(authorization, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling bulkMappingSort");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling bulkMappingSort");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/api/2/apps/mappings/sort', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkSort operation.
     * @callback module:api/DefaultApi~bulkSortCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Array.<Number>} requestBody The request body must contain an array of App Rule IDs in the desired order.
     * @param {module:api/DefaultApi~bulkSortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    bulkSort(authorization, appId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling bulkSort");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bulkSort");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling bulkSort");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/sort', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/DefaultApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/Schema} schema 
     * @param {module:api/DefaultApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    createApp(authorization, schema, callback) {
      let postBody = schema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createApp");
      }
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling createApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/api/2/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationServer operation.
     * @callback module:api/DefaultApi~createAuthorizationServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/CreateAuthorizationServerRequest} createAuthorizationServerRequest 
     * @param {module:api/DefaultApi~createAuthorizationServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    createAuthorizationServer(authorization, createAuthorizationServerRequest, callback) {
      let postBody = createAuthorizationServerRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createAuthorizationServer");
      }
      // verify the required parameter 'createAuthorizationServerRequest' is set
      if (createAuthorizationServerRequest === undefined || createAuthorizationServerRequest === null) {
        throw new Error("Missing the required parameter 'createAuthorizationServerRequest' when calling createAuthorizationServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Id;
      return this.apiClient.callApi(
        '/api/2/api_authorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEnvironmentVariable operation.
     * @callback module:api/DefaultApi~createEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envvar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/CreateEnvironmentVariableRequest} createEnvironmentVariableRequest 
     * @param {module:api/DefaultApi~createEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envvar}
     */
    createEnvironmentVariable(authorization, createEnvironmentVariableRequest, callback) {
      let postBody = createEnvironmentVariableRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createEnvironmentVariable");
      }
      // verify the required parameter 'createEnvironmentVariableRequest' is set
      if (createEnvironmentVariableRequest === undefined || createEnvironmentVariableRequest === null) {
        throw new Error("Missing the required parameter 'createEnvironmentVariableRequest' when calling createEnvironmentVariable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Envvar;
      return this.apiClient.callApi(
        '/api/2/hooks/envs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHook operation.
     * @callback module:api/DefaultApi~createHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/Hook} hook 
     * @param {module:api/DefaultApi~createHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createHook(authorization, hook, callback) {
      let postBody = hook;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createHook");
      }
      // verify the required parameter 'hook' is set
      if (hook === undefined || hook === null) {
        throw new Error("Missing the required parameter 'hook' when calling createHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMapping operation.
     * @callback module:api/DefaultApi~createMappingCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/Mapping} mapping 
     * @param {module:api/DefaultApi~createMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createMapping(authorization, mapping, callback) {
      let postBody = mapping;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createMapping");
      }
      // verify the required parameter 'mapping' is set
      if (mapping === undefined || mapping === null) {
        throw new Error("Missing the required parameter 'mapping' when calling createMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/2/mappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRiskRule operation.
     * @callback module:api/DefaultApi~createRiskRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/RiskRule} riskRule 
     * @param {module:api/DefaultApi~createRiskRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createRiskRule(authorization, riskRule, callback) {
      let postBody = riskRule;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createRiskRule");
      }
      // verify the required parameter 'riskRule' is set
      if (riskRule === undefined || riskRule === null) {
        throw new Error("Missing the required parameter 'riskRule' when calling createRiskRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/risk/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoles operation.
     * @callback module:api/DefaultApi~createRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateRoles201ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/DefaultApi~createRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateRoles201ResponseInner>}
     */
    createRoles(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CreateRoles201ResponseInner];
      return this.apiClient.callApi(
        '/api/2/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/DefaultApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {module:model/Rule} rule 
     * @param {module:api/DefaultApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleId}
     */
    createRule(authorization, appId, rule, callback) {
      let postBody = rule;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createRule");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createRule");
      }
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling createRule");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleId;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/User} user 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.mappings Controls how mappings will be applied to the user on creation. Defaults to async.
     * @param {Boolean} opts.validatePolicy Will passwords validate against the User Policy? Defaults to true.
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createUser(authorization, user, opts, callback) {
      opts = opts || {};
      let postBody = user;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createUser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'mappings': opts['mappings'],
        'validate_policy': opts['validatePolicy']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/2/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccessTokenClaim operation.
     * @callback module:api/DefaultApi~deleteAccessTokenClaimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {Number} claimId 
     * @param {module:api/DefaultApi~deleteAccessTokenClaimCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccessTokenClaim(authorization, id, claimId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteAccessTokenClaim");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAccessTokenClaim");
      }
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling deleteAccessTokenClaim");
      }

      let pathParams = {
        'id': id,
        'claim_id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/claims/{claim_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/DefaultApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {module:api/DefaultApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApp(authorization, appId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteApp");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppParameter operation.
     * @callback module:api/DefaultApi~deleteAppParameterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Number} parameterId 
     * @param {module:api/DefaultApi~deleteAppParameterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppParameter(authorization, appId, parameterId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteAppParameter");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAppParameter");
      }
      // verify the required parameter 'parameterId' is set
      if (parameterId === undefined || parameterId === null) {
        throw new Error("Missing the required parameter 'parameterId' when calling deleteAppParameter");
      }

      let pathParams = {
        'app_id': appId,
        'parameter_id': parameterId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/parameters/{parameter_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationServer operation.
     * @callback module:api/DefaultApi~deleteAuthorizationServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteAuthorizationServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAuthorizationServer(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteAuthorizationServer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuthorizationServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironmentVariable operation.
     * @callback module:api/DefaultApi~deleteEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} envvarId Set to the id of the Hook Environment Variable that you want to fetch.
     * @param {module:api/DefaultApi~deleteEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEnvironmentVariable(authorization, envvarId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEnvironmentVariable");
      }
      // verify the required parameter 'envvarId' is set
      if (envvarId === undefined || envvarId === null) {
        throw new Error("Missing the required parameter 'envvarId' when calling deleteEnvironmentVariable");
      }

      let pathParams = {
        'envvar_id': envvarId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/hooks/envs/{envvar_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFactor operation.
     * @callback module:api/DefaultApi~deleteFactorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {Number} deviceId Set to the device_id of the MFA device.
     * @param {module:api/DefaultApi~deleteFactorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFactor(authorization, userId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteFactor");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteFactor");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deleteFactor");
      }

      let pathParams = {
        'user_id': userId,
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/devices/{device_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHook operation.
     * @callback module:api/DefaultApi~deleteHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} hookId Set to the id of the Hook that you want to return.
     * @param {module:api/DefaultApi~deleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHook(authorization, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteHook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling deleteHook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/hooks/{hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMapping operation.
     * @callback module:api/DefaultApi~deleteMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} mappingId The id of the user mapping to locate.
     * @param {module:api/DefaultApi~deleteMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMapping(authorization, mappingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteMapping");
      }
      // verify the required parameter 'mappingId' is set
      if (mappingId === undefined || mappingId === null) {
        throw new Error("Missing the required parameter 'mappingId' when calling deleteMapping");
      }

      let pathParams = {
        'mapping_id': mappingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mappings/{mapping_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRiskRule operation.
     * @callback module:api/DefaultApi~deleteRiskRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} riskRuleId 
     * @param {module:api/DefaultApi~deleteRiskRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskRule}
     */
    deleteRiskRule(authorization, riskRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRiskRule");
      }
      // verify the required parameter 'riskRuleId' is set
      if (riskRuleId === undefined || riskRuleId === null) {
        throw new Error("Missing the required parameter 'riskRuleId' when calling deleteRiskRule");
      }

      let pathParams = {
        'risk_rule_id': riskRuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RiskRule;
      return this.apiClient.callApi(
        '/api/2/risk/rules/{risk_rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/DefaultApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {module:api/DefaultApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRole(authorization, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteRole");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/DefaultApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Number} ruleId The id of the app rule to locate.
     * @param {module:api/DefaultApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRule(authorization, appId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRule");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling deleteRule");
      }

      let pathParams = {
        'app_id': appId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/{rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScope operation.
     * @callback module:api/DefaultApi~deleteScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {Number} scopeId 
     * @param {module:api/DefaultApi~deleteScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScope(authorization, id, scopeId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteScope");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteScope");
      }
      // verify the required parameter 'scopeId' is set
      if (scopeId === undefined || scopeId === null) {
        throw new Error("Missing the required parameter 'scopeId' when calling deleteScope");
      }

      let pathParams = {
        'id': id,
        'scope_id': scopeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/scopes/{scope_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user that you want to return.
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(authorization, userId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dryRunMapping operation.
     * @callback module:api/DefaultApi~dryRunMappingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} mappingId The id of the user mapping to locate.
     * @param {Array.<Number>} requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied
     * @param {module:api/DefaultApi~dryRunMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    dryRunMapping(authorization, mappingId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling dryRunMapping");
      }
      // verify the required parameter 'mappingId' is set
      if (mappingId === undefined || mappingId === null) {
        throw new Error("Missing the required parameter 'mappingId' when calling dryRunMapping");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling dryRunMapping");
      }

      let pathParams = {
        'mapping_id': mappingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/api/2/mappings/{mapping_id}/dryrun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enrollFactor operation.
     * @callback module:api/DefaultApi~enrollFactorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {module:model/EnrollFactorRequest} enrollFactorRequest 
     * @param {module:api/DefaultApi~enrollFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    enrollFactor(authorization, userId, enrollFactorRequest, callback) {
      let postBody = enrollFactorRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling enrollFactor");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling enrollFactor");
      }
      // verify the required parameter 'enrollFactorRequest' is set
      if (enrollFactorRequest === undefined || enrollFactorRequest === null) {
        throw new Error("Missing the required parameter 'enrollFactorRequest' when calling enrollFactor");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/registrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateMfaToken operation.
     * @callback module:api/DefaultApi~generateMfaTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateMfaToken200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/GenerateMfaTokenRequest} generateMfaTokenRequest 
     * @param {module:api/DefaultApi~generateMfaTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateMfaToken200Response}
     */
    generateMfaToken(authorization, generateMfaTokenRequest, callback) {
      let postBody = generateMfaTokenRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling generateMfaToken");
      }
      // verify the required parameter 'generateMfaTokenRequest' is set
      if (generateMfaTokenRequest === undefined || generateMfaTokenRequest === null) {
        throw new Error("Missing the required parameter 'generateMfaTokenRequest' when calling generateMfaToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateMfaToken200Response;
      return this.apiClient.callApi(
        '/api/2/mfs/users/{user_id}/mfa_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateSamlAssertion operation.
     * @callback module:api/DefaultApi~generateSamlAssertionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/GenerateSamlAssertionRequest} generateSamlAssertionRequest 
     * @param {module:api/DefaultApi~generateSamlAssertionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateSamlAssertion(authorization, generateSamlAssertionRequest, callback) {
      let postBody = generateSamlAssertionRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling generateSamlAssertion");
      }
      // verify the required parameter 'generateSamlAssertionRequest' is set
      if (generateSamlAssertionRequest === undefined || generateSamlAssertionRequest === null) {
        throw new Error("Missing the required parameter 'generateSamlAssertionRequest' when calling generateSamlAssertion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/saml_assertion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateToken operation.
     * @callback module:api/DefaultApi~generateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateToken200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/GenerateTokenRequest} generateTokenRequest 
     * @param {module:api/DefaultApi~generateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateToken200Response}
     */
    generateToken(authorization, generateTokenRequest, callback) {
      let postBody = generateTokenRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling generateToken");
      }
      // verify the required parameter 'generateTokenRequest' is set
      if (generateTokenRequest === undefined || generateTokenRequest === null) {
        throw new Error("Missing the required parameter 'generateTokenRequest' when calling generateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateToken200Response;
      return this.apiClient.callApi(
        '/auth/oauth2/v2/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/DefaultApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {module:api/DefaultApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    getApp(authorization, appId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getApp");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizationServer operation.
     * @callback module:api/DefaultApi~getAuthorizationServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorizationServer200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getAuthorizationServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorizationServer200Response}
     */
    getAuthorizationServer(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAuthorizationServer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAuthorizationServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthorizationServer200Response;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableFactors operation.
     * @callback module:api/DefaultApi~getAvailableFactorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAvailableFactors200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {module:api/DefaultApi~getAvailableFactorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAvailableFactors200ResponseInner>}
     */
    getAvailableFactors(authorization, userId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAvailableFactors");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAvailableFactors");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAvailableFactors200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/factors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientApps operation.
     * @callback module:api/DefaultApi~getClientAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetClientApps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getClientAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetClientApps200ResponseInner>}
     */
    getClientApps(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getClientApps");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClientApps");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetClientApps200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnrolledFactors operation.
     * @callback module:api/DefaultApi~getEnrolledFactorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {module:api/DefaultApi~getEnrolledFactorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    getEnrolledFactors(authorization, userId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEnrolledFactors");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getEnrolledFactors");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Device];
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentVariable operation.
     * @callback module:api/DefaultApi~getEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envvar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} envvarId Set to the id of the Hook Environment Variable that you want to fetch.
     * @param {module:api/DefaultApi~getEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envvar}
     */
    getEnvironmentVariable(authorization, envvarId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEnvironmentVariable");
      }
      // verify the required parameter 'envvarId' is set
      if (envvarId === undefined || envvarId === null) {
        throw new Error("Missing the required parameter 'envvarId' when calling getEnvironmentVariable");
      }

      let pathParams = {
        'envvar_id': envvarId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Envvar;
      return this.apiClient.callApi(
        '/api/2/hooks/envs/{envvar_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHook operation.
     * @callback module:api/DefaultApi~getHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} hookId Set to the id of the Hook that you want to return.
     * @param {module:api/DefaultApi~getHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    getHook(authorization, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling getHook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/api/2/hooks/{hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogs operation.
     * @callback module:api/DefaultApi~getLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Log>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} hookId Set to the id of the Hook that you want to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.requestId Returns logs that contain this request_id.
     * @param {String} opts.correlationId Returns logs that contain this correlation_id.
     * @param {module:api/DefaultApi~getLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Log>}
     */
    getLogs(authorization, hookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLogs");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling getLogs");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'request_id': opts['requestId'],
        'correlation_id': opts['correlationId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Log];
      return this.apiClient.callApi(
        '/api/2/hooks/{hook_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapping operation.
     * @callback module:api/DefaultApi~getMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} mappingId The id of the user mapping to locate.
     * @param {module:api/DefaultApi~getMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mapping}
     */
    getMapping(authorization, mappingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMapping");
      }
      // verify the required parameter 'mappingId' is set
      if (mappingId === undefined || mappingId === null) {
        throw new Error("Missing the required parameter 'mappingId' when calling getMapping");
      }

      let pathParams = {
        'mapping_id': mappingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Mapping;
      return this.apiClient.callApi(
        '/api/2/mappings/{mapping_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRateLimit operation.
     * @callback module:api/DefaultApi~getRateLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRateLimit200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/DefaultApi~getRateLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRateLimit200Response}
     */
    getRateLimit(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRateLimit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRateLimit200Response;
      return this.apiClient.callApi(
        '/auth/rate_limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRiskRule operation.
     * @callback module:api/DefaultApi~getRiskRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} riskRuleId 
     * @param {module:api/DefaultApi~getRiskRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRiskRule(authorization, riskRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRiskRule");
      }
      // verify the required parameter 'riskRuleId' is set
      if (riskRuleId === undefined || riskRuleId === null) {
        throw new Error("Missing the required parameter 'riskRuleId' when calling getRiskRule");
      }

      let pathParams = {
        'risk_rule_id': riskRuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/risk/rules/{risk_rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRiskScore operation.
     * @callback module:api/DefaultApi~getRiskScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRiskScore200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/GetRiskScoreRequest} getRiskScoreRequest 
     * @param {module:api/DefaultApi~getRiskScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRiskScore200Response}
     */
    getRiskScore(authorization, getRiskScoreRequest, callback) {
      let postBody = getRiskScoreRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRiskScore");
      }
      // verify the required parameter 'getRiskScoreRequest' is set
      if (getRiskScoreRequest === undefined || getRiskScoreRequest === null) {
        throw new Error("Missing the required parameter 'getRiskScoreRequest' when calling getRiskScore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRiskScore200Response;
      return this.apiClient.callApi(
        '/api/2/risk/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/DefaultApi~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {module:api/DefaultApi~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRole(authorization, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleAdmins operation.
     * @callback module:api/DefaultApi~getRoleAdminsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.name Allows you to filter on first name, last name, username, and email address.
     * @param {Boolean} opts.includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role.
     * @param {module:api/DefaultApi~getRoleAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    getRoleAdmins(authorization, roleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRoleAdmins");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRoleAdmins");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'name': opts['name'],
        'include_unassigned': opts['includeUnassigned']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['applcation/json', 'application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/admins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleApps operation.
     * @callback module:api/DefaultApi~getRoleAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {Boolean} opts.assigned Optional. Defaults to true. Returns all apps not yet assigned to the role.
     * @param {module:api/DefaultApi~getRoleAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema>}
     */
    getRoleApps(authorization, roleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRoleApps");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRoleApps");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'assigned': opts['assigned']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['applcation/json', 'application/json'];
      let returnType = [Schema];
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleUsers operation.
     * @callback module:api/DefaultApi~getRoleUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.name Allows you to filter on first name, last name, username, and email address.
     * @param {Boolean} opts.includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role.
     * @param {module:api/DefaultApi~getRoleUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    getRoleUsers(authorization, roleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRoleUsers");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRoleUsers");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'name': opts['name'],
        'include_unassigned': opts['includeUnassigned']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['applcation/json', 'application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRule operation.
     * @callback module:api/DefaultApi~getRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Number} ruleId The id of the app rule to locate.
     * @param {module:api/DefaultApi~getRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    getRule(authorization, appId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRule");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling getRule");
      }

      let pathParams = {
        'app_id': appId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/{rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreInsights operation.
     * @callback module:api/DefaultApi~getScoreInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetScoreInsights200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} opts.before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago.
     * @param {String} opts.after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago.
     * @param {module:api/DefaultApi~getScoreInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetScoreInsights200Response}
     */
    getScoreInsights(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getScoreInsights");
      }

      let pathParams = {
      };
      let queryParams = {
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetScoreInsights200Response;
      return this.apiClient.callApi(
        '/api/2/risk/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user that you want to return.
     * @param {module:api/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUser(authorization, userId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/2/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserApps operation.
     * @callback module:api/DefaultApi~getUserAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUserApps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user that you want to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ignoreVisibility Defaults to `false`. When `true` will show all apps that are assigned to a user regardless of their portal visibility setting.
     * @param {module:api/DefaultApi~getUserAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUserApps200ResponseInner>}
     */
    getUserApps(authorization, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUserApps");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserApps");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'ignore_visibility': opts['ignoreVisibility']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetUserApps200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/users/{user_id}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccessTokenClaims operation.
     * @callback module:api/DefaultApi~listAccessTokenClaimsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListAccessTokenClaims200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:api/DefaultApi~listAccessTokenClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListAccessTokenClaims200ResponseInner>}
     */
    listAccessTokenClaims(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listAccessTokenClaims");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listAccessTokenClaims");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListAccessTokenClaims200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/claims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listActionValues operation.
     * @callback module:api/DefaultApi~listActionValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListConditionValues200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {String} actionValue The value for the selected action.
     * @param {module:api/DefaultApi~listActionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListConditionValues200ResponseInner>}
     */
    listActionValues(authorization, appId, actionValue, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listActionValues");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listActionValues");
      }
      // verify the required parameter 'actionValue' is set
      if (actionValue === undefined || actionValue === null) {
        throw new Error("Missing the required parameter 'actionValue' when calling listActionValues");
      }

      let pathParams = {
        'app_id': appId,
        'action_value': actionValue
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListConditionValues200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/actions/{actuion_value}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listActions operation.
     * @callback module:api/DefaultApi~listActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListActions200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {module:api/DefaultApi~listActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListActions200ResponseInner>}
     */
    listActions(authorization, appId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listActions");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listActions");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListActions200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppUsers operation.
     * @callback module:api/DefaultApi~listAppUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListAppUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {module:api/DefaultApi~listAppUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListAppUsers200ResponseInner>}
     */
    listAppUsers(authorization, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listAppUsers");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAppUsers");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListAppUsers200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApps operation.
     * @callback module:api/DefaultApi~listAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.name The name or partial name of the app to search for. When using a partial name you must append a wildcard `*`
     * @param {Number} opts.connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs.
     * @param {module:model/AuthMethod} opts.authMethod Returns all apps based of a given type.
     * @param {module:api/DefaultApi~listAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema>}
     */
    listApps(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listApps");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'name': opts['name'],
        'connector_id': opts['connectorId'],
        'auth_method': opts['authMethod']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema];
      return this.apiClient.callApi(
        '/api/2/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationServers operation.
     * @callback module:api/DefaultApi~listAuthorizationServersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListAuthorizationServers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/DefaultApi~listAuthorizationServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListAuthorizationServers200ResponseInner>}
     */
    listAuthorizationServers(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listAuthorizationServers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListAuthorizationServers200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/api_authorizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConditionOperators operation.
     * @callback module:api/DefaultApi~listConditionOperatorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListConditionOperators200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {String} conditionValue The value for the selected condition.
     * @param {module:api/DefaultApi~listConditionOperatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListConditionOperators200ResponseInner>}
     */
    listConditionOperators(authorization, appId, conditionValue, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listConditionOperators");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listConditionOperators");
      }
      // verify the required parameter 'conditionValue' is set
      if (conditionValue === undefined || conditionValue === null) {
        throw new Error("Missing the required parameter 'conditionValue' when calling listConditionOperators");
      }

      let pathParams = {
        'app_id': appId,
        'condition_value': conditionValue
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListConditionOperators200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/conditions/{condition_value}/operators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConditionValues operation.
     * @callback module:api/DefaultApi~listConditionValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListConditionValues200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {String} conditionValue The value for the selected condition.
     * @param {module:api/DefaultApi~listConditionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListConditionValues200ResponseInner>}
     */
    listConditionValues(authorization, appId, conditionValue, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listConditionValues");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listConditionValues");
      }
      // verify the required parameter 'conditionValue' is set
      if (conditionValue === undefined || conditionValue === null) {
        throw new Error("Missing the required parameter 'conditionValue' when calling listConditionValues");
      }

      let pathParams = {
        'app_id': appId,
        'condition_value': conditionValue
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListConditionValues200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/conditions/{condition_value}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConditions operation.
     * @callback module:api/DefaultApi~listConditionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListConditions200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {module:api/DefaultApi~listConditionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListConditions200ResponseInner>}
     */
    listConditions(authorization, appId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listConditions");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listConditions");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListConditions200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/conditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectors operation.
     * @callback module:api/DefaultApi~listConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Connector>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.name The name or partial name of the connector to search for. When using a partial name you must append a wildcard `*`
     * @param {module:model/AuthMethod} opts.authMethod Returns all connectors of a given type.
     * @param {module:api/DefaultApi~listConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Connector>}
     */
    listConnectors(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listConnectors");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'name': opts['name'],
        'auth_method': opts['authMethod']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Connector];
      return this.apiClient.callApi(
        '/api/2/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEnvironmentVariables operation.
     * @callback module:api/DefaultApi~listEnvironmentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Envvar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {module:api/DefaultApi~listEnvironmentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Envvar>}
     */
    listEnvironmentVariables(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listEnvironmentVariables");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Envvar];
      return this.apiClient.callApi(
        '/api/2/hooks/envs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHooks operation.
     * @callback module:api/DefaultApi~listHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {module:api/DefaultApi~listHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hook>}
     */
    listHooks(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listHooks");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Hook];
      return this.apiClient.callApi(
        '/api/2/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMappingActionValues operation.
     * @callback module:api/DefaultApi~listMappingActionValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListConditionValues200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} actionValue The value for the selected action.
     * @param {module:api/DefaultApi~listMappingActionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListConditionValues200ResponseInner>}
     */
    listMappingActionValues(authorization, actionValue, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listMappingActionValues");
      }
      // verify the required parameter 'actionValue' is set
      if (actionValue === undefined || actionValue === null) {
        throw new Error("Missing the required parameter 'actionValue' when calling listMappingActionValues");
      }

      let pathParams = {
        'action_value': actionValue
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListConditionValues200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/mappings/actions/{actuion_value}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMappingActions operation.
     * @callback module:api/DefaultApi~listMappingActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListActions200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/DefaultApi~listMappingActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListActions200ResponseInner>}
     */
    listMappingActions(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listMappingActions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListActions200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/mappings/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMappingConditionOperators operation.
     * @callback module:api/DefaultApi~listMappingConditionOperatorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListMappingConditionOperators200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} conditionValue The value for the selected condition.
     * @param {module:api/DefaultApi~listMappingConditionOperatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListMappingConditionOperators200ResponseInner>}
     */
    listMappingConditionOperators(authorization, conditionValue, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listMappingConditionOperators");
      }
      // verify the required parameter 'conditionValue' is set
      if (conditionValue === undefined || conditionValue === null) {
        throw new Error("Missing the required parameter 'conditionValue' when calling listMappingConditionOperators");
      }

      let pathParams = {
        'condition_value': conditionValue
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListMappingConditionOperators200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/mappings/conditions/{condition_value}/operators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMappingConditionValues operation.
     * @callback module:api/DefaultApi~listMappingConditionValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListConditionValues200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} conditionValue The value for the selected condition.
     * @param {module:api/DefaultApi~listMappingConditionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListConditionValues200ResponseInner>}
     */
    listMappingConditionValues(authorization, conditionValue, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listMappingConditionValues");
      }
      // verify the required parameter 'conditionValue' is set
      if (conditionValue === undefined || conditionValue === null) {
        throw new Error("Missing the required parameter 'conditionValue' when calling listMappingConditionValues");
      }

      let pathParams = {
        'condition_value': conditionValue
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListConditionValues200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/mappings/conditions/{condition_value}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMappingConditions operation.
     * @callback module:api/DefaultApi~listMappingConditionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListMappingConditions200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/DefaultApi~listMappingConditionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListMappingConditions200ResponseInner>}
     */
    listMappingConditions(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listMappingConditions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListMappingConditions200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/apps/mappings/conditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMappings operation.
     * @callback module:api/DefaultApi~listMappingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mapping>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.enabled Defaults to true. When set to `false` will return all disabled mappings. (default to true)
     * @param {String} opts.hasCondition Filters Mappings based on their Conditions.
     * @param {module:model/String} opts.hasConditionType Filters Mappings based on their condition types.
     * @param {String} opts.hasAction Filters Mappings based on their Actions.
     * @param {module:model/String} opts.hasActionType Filters Mappings based on their action types.
     * @param {module:api/DefaultApi~listMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mapping>}
     */
    listMappings(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listMappings");
      }

      let pathParams = {
      };
      let queryParams = {
        'enabled': opts['enabled'],
        'has_condition': opts['hasCondition'],
        'has_condition_type': opts['hasConditionType'],
        'has_action': opts['hasAction'],
        'has_action_type': opts['hasActionType']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Mapping];
      return this.apiClient.callApi(
        '/api/2/mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRiskRules operation.
     * @callback module:api/DefaultApi~listRiskRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/DefaultApi~listRiskRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listRiskRules(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listRiskRules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/risk/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/DefaultApi~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.name Optional. Filters by role name.
     * @param {String} opts.appId Optional. Returns roles that contain this app name.
     * @param {module:model/String} opts.fields Optional. Comma delimited list of fields to return.
     * @param {module:api/DefaultApi~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    listRoles(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listRoles");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'name': opts['name'],
        'app_id': opts['appId'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/api/2/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRules operation.
     * @callback module:api/DefaultApi~listRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.enabled Defaults to true. When set to `false` will return all disabled rules.
     * @param {String} opts.hasCondition Filters Rules based on their Conditions.
     * @param {String} opts.hasConditionType Filters Rules based on their condition types.
     * @param {String} opts.hasAction Filters Rules based on their Actions.
     * @param {String} opts.hasActionType Filters Rules based on their action types.
     * @param {module:api/DefaultApi~listRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rule>}
     */
    listRules(authorization, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listRules");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listRules");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'enabled': opts['enabled'],
        'has_condition': opts['hasCondition'],
        'has_condition_type': opts['hasConditionType'],
        'has_action': opts['hasAction'],
        'has_action_type': opts['hasActionType']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Rule];
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listScopes operation.
     * @callback module:api/DefaultApi~listScopesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListScopes200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:api/DefaultApi~listScopesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListScopes200ResponseInner>}
     */
    listScopes(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listScopes");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listScopes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListScopes200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/DefaultApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
     * @param {Number} opts.page The page number of results to return.
     * @param {String} opts.cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
     * @param {String} opts.createdSince An ISO8601 timestamp value that returns all users created after a given date & time.
     * @param {String} opts.createdUntil An ISO8601 timestamp value that returns all users created before a given date & time.
     * @param {String} opts.updatedSince An ISO8601 timestamp value that returns all users updated after a given date & time.
     * @param {String} opts.updatedUntil An ISO8601 timestamp value that returns all users updated before a given date & time.
     * @param {String} opts.lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date & time.
     * @param {String} opts.lastLoginUntil 
     * @param {String} opts.firstname The first name of the user
     * @param {String} opts.lastname The last name of the user
     * @param {String} opts.email The email address of the user
     * @param {String} opts.username The username for the user
     * @param {String} opts.samaccountname The AD login name for the user
     * @param {String} opts.directoryId The ID in OneLogin of the Directory that the user belongs to
     * @param {String} opts.externalId An external identifier that has been set on the user
     * @param {String} opts.appId The ID of a OneLogin Application
     * @param {String} opts.userIds A comma separated list of OneLogin User IDs
     * @param {String} opts.customAttributesAttributeName The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes.
     * @param {String} opts.fields A comma separated list user attributes to return.
     * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    listUsers(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'created_since': opts['createdSince'],
        'created_until': opts['createdUntil'],
        'updated_since': opts['updatedSince'],
        'updated_until': opts['updatedUntil'],
        'last_login_since': opts['lastLoginSince'],
        'last_login_until': opts['lastLoginUntil'],
        'firstname': opts['firstname'],
        'lastname': opts['lastname'],
        'email': opts['email'],
        'username': opts['username'],
        'samaccountname': opts['samaccountname'],
        'directory_id': opts['directoryId'],
        'external_id': opts['externalId'],
        'app_id': opts['appId'],
        'user_ids': opts['userIds'],
        'custom_attributes.{attribute_name}': opts['customAttributesAttributeName'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/api/2/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClientApp operation.
     * @callback module:api/DefaultApi~removeClientAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {Number} clientAppId 
     * @param {module:api/DefaultApi~removeClientAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeClientApp(authorization, id, clientAppId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeClientApp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClientApp");
      }
      // verify the required parameter 'clientAppId' is set
      if (clientAppId === undefined || clientAppId === null) {
        throw new Error("Missing the required parameter 'clientAppId' when calling removeClientApp");
      }

      let pathParams = {
        'id': id,
        'client_app_id': clientAppId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/clients/{client_app_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRoleAdmins operation.
     * @callback module:api/DefaultApi~removeRoleAdminsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {module:model/RemoveRoleUsersRequest} removeRoleUsersRequest 
     * @param {module:api/DefaultApi~removeRoleAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRoleAdmins(authorization, roleId, removeRoleUsersRequest, callback) {
      let postBody = removeRoleUsersRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeRoleAdmins");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling removeRoleAdmins");
      }
      // verify the required parameter 'removeRoleUsersRequest' is set
      if (removeRoleUsersRequest === undefined || removeRoleUsersRequest === null) {
        throw new Error("Missing the required parameter 'removeRoleUsersRequest' when calling removeRoleAdmins");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/admins', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRoleUsers operation.
     * @callback module:api/DefaultApi~removeRoleUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {module:model/RemoveRoleUsersRequest} removeRoleUsersRequest 
     * @param {module:api/DefaultApi~removeRoleUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRoleUsers(authorization, roleId, removeRoleUsersRequest, callback) {
      let postBody = removeRoleUsersRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeRoleUsers");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling removeRoleUsers");
      }
      // verify the required parameter 'removeRoleUsersRequest' is set
      if (removeRoleUsersRequest === undefined || removeRoleUsersRequest === null) {
        throw new Error("Missing the required parameter 'removeRoleUsersRequest' when calling removeRoleUsers");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeToken operation.
     * @callback module:api/DefaultApi~revokeTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateToken400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeTokenRequest} opts.revokeTokenRequest 
     * @param {module:api/DefaultApi~revokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateToken400Response}
     */
    revokeToken(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['revokeTokenRequest'];
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling revokeToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateToken400Response;
      return this.apiClient.callApi(
        '/auth/oauth2/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoleApps operation.
     * @callback module:api/DefaultApi~setRoleAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SetRoleApps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {Array.<Number>} requestBody 
     * @param {module:api/DefaultApi~setRoleAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SetRoleApps200ResponseInner>}
     */
    setRoleApps(authorization, roleId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling setRoleApps");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling setRoleApps");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling setRoleApps");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SetRoleApps200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}/apps', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackEvent operation.
     * @callback module:api/DefaultApi~trackEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/TrackEventRequest} trackEventRequest 
     * @param {module:api/DefaultApi~trackEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trackEvent(authorization, trackEventRequest, callback) {
      let postBody = trackEventRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling trackEvent");
      }
      // verify the required parameter 'trackEventRequest' is set
      if (trackEventRequest === undefined || trackEventRequest === null) {
        throw new Error("Missing the required parameter 'trackEventRequest' when calling trackEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/risk/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccessTokenClaim operation.
     * @callback module:api/DefaultApi~updateAccessTokenClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {Number} claimId 
     * @param {module:model/AddAccessTokenClaimRequest} addAccessTokenClaimRequest 
     * @param {module:api/DefaultApi~updateAccessTokenClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    updateAccessTokenClaim(authorization, id, claimId, addAccessTokenClaimRequest, callback) {
      let postBody = addAccessTokenClaimRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateAccessTokenClaim");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAccessTokenClaim");
      }
      // verify the required parameter 'claimId' is set
      if (claimId === undefined || claimId === null) {
        throw new Error("Missing the required parameter 'claimId' when calling updateAccessTokenClaim");
      }
      // verify the required parameter 'addAccessTokenClaimRequest' is set
      if (addAccessTokenClaimRequest === undefined || addAccessTokenClaimRequest === null) {
        throw new Error("Missing the required parameter 'addAccessTokenClaimRequest' when calling updateAccessTokenClaim");
      }

      let pathParams = {
        'id': id,
        'claim_id': claimId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Id;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/claims/{claim_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/DefaultApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {module:model/Schema} schema 
     * @param {module:api/DefaultApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    updateApp(authorization, appId, schema, callback) {
      let postBody = schema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateApp");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling updateApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAuthorizationServer operation.
     * @callback module:api/DefaultApi~updateAuthorizationServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {module:model/CreateAuthorizationServerRequest} createAuthorizationServerRequest 
     * @param {module:api/DefaultApi~updateAuthorizationServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    updateAuthorizationServer(authorization, id, createAuthorizationServerRequest, callback) {
      let postBody = createAuthorizationServerRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateAuthorizationServer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAuthorizationServer");
      }
      // verify the required parameter 'createAuthorizationServerRequest' is set
      if (createAuthorizationServerRequest === undefined || createAuthorizationServerRequest === null) {
        throw new Error("Missing the required parameter 'createAuthorizationServerRequest' when calling updateAuthorizationServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Id;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientApp operation.
     * @callback module:api/DefaultApi~updateClientAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {Number} clientAppId 
     * @param {module:model/UpdateClientAppRequest} updateClientAppRequest 
     * @param {module:api/DefaultApi~updateClientAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientApp}
     */
    updateClientApp(authorization, id, clientAppId, updateClientAppRequest, callback) {
      let postBody = updateClientAppRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateClientApp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClientApp");
      }
      // verify the required parameter 'clientAppId' is set
      if (clientAppId === undefined || clientAppId === null) {
        throw new Error("Missing the required parameter 'clientAppId' when calling updateClientApp");
      }
      // verify the required parameter 'updateClientAppRequest' is set
      if (updateClientAppRequest === undefined || updateClientAppRequest === null) {
        throw new Error("Missing the required parameter 'updateClientAppRequest' when calling updateClientApp");
      }

      let pathParams = {
        'id': id,
        'client_app_id': clientAppId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientApp;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/clients/{client_app_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEnvironmentVariable operation.
     * @callback module:api/DefaultApi~updateEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envvar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} envvarId Set to the id of the Hook Environment Variable that you want to fetch.
     * @param {module:model/UpdateEnvironmentVariableRequest} updateEnvironmentVariableRequest 
     * @param {module:api/DefaultApi~updateEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envvar}
     */
    updateEnvironmentVariable(authorization, envvarId, updateEnvironmentVariableRequest, callback) {
      let postBody = updateEnvironmentVariableRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateEnvironmentVariable");
      }
      // verify the required parameter 'envvarId' is set
      if (envvarId === undefined || envvarId === null) {
        throw new Error("Missing the required parameter 'envvarId' when calling updateEnvironmentVariable");
      }
      // verify the required parameter 'updateEnvironmentVariableRequest' is set
      if (updateEnvironmentVariableRequest === undefined || updateEnvironmentVariableRequest === null) {
        throw new Error("Missing the required parameter 'updateEnvironmentVariableRequest' when calling updateEnvironmentVariable");
      }

      let pathParams = {
        'envvar_id': envvarId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Envvar;
      return this.apiClient.callApi(
        '/api/2/hooks/envs/{envvar_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHook operation.
     * @callback module:api/DefaultApi~updateHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} hookId Set to the id of the Hook that you want to return.
     * @param {module:model/Hook} hook 
     * @param {module:api/DefaultApi~updateHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    updateHook(authorization, hookId, hook, callback) {
      let postBody = hook;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateHook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling updateHook");
      }
      // verify the required parameter 'hook' is set
      if (hook === undefined || hook === null) {
        throw new Error("Missing the required parameter 'hook' when calling updateHook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/api/2/hooks/{hook_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMapping operation.
     * @callback module:api/DefaultApi~updateMappingCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} mappingId The id of the user mapping to locate.
     * @param {module:model/Mapping} mapping 
     * @param {module:api/DefaultApi~updateMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateMapping(authorization, mappingId, mapping, callback) {
      let postBody = mapping;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateMapping");
      }
      // verify the required parameter 'mappingId' is set
      if (mappingId === undefined || mappingId === null) {
        throw new Error("Missing the required parameter 'mappingId' when calling updateMapping");
      }
      // verify the required parameter 'mapping' is set
      if (mapping === undefined || mapping === null) {
        throw new Error("Missing the required parameter 'mapping' when calling updateMapping");
      }

      let pathParams = {
        'mapping_id': mappingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/2/mappings/{mapping_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRiskRule operation.
     * @callback module:api/DefaultApi~updateRiskRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {String} riskRuleId 
     * @param {module:model/RiskRule} riskRule 
     * @param {module:api/DefaultApi~updateRiskRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskRule}
     */
    updateRiskRule(authorization, riskRuleId, riskRule, callback) {
      let postBody = riskRule;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateRiskRule");
      }
      // verify the required parameter 'riskRuleId' is set
      if (riskRuleId === undefined || riskRuleId === null) {
        throw new Error("Missing the required parameter 'riskRuleId' when calling updateRiskRule");
      }
      // verify the required parameter 'riskRule' is set
      if (riskRule === undefined || riskRule === null) {
        throw new Error("Missing the required parameter 'riskRule' when calling updateRiskRule");
      }

      let pathParams = {
        'risk_rule_id': riskRuleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RiskRule;
      return this.apiClient.callApi(
        '/api/2/risk/rules/{risk_rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/DefaultApi~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRole200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} roleId Set to the id of the role you want to return.
     * @param {module:model/Role} role 
     * @param {module:api/DefaultApi~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRole200Response}
     */
    updateRole(authorization, roleId, role, callback) {
      let postBody = role;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRole");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateRole");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRole200Response;
      return this.apiClient.callApi(
        '/api/2/roles/{role_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/DefaultApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} appId 
     * @param {Number} ruleId The id of the app rule to locate.
     * @param {module:model/Rule} rule 
     * @param {module:api/DefaultApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleId}
     */
    updateRule(authorization, appId, ruleId, rule, callback) {
      let postBody = rule;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateRule");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling updateRule");
      }
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling updateRule");
      }

      let pathParams = {
        'app_id': appId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleId;
      return this.apiClient.callApi(
        '/api/2/apps/{app_id}/rules/{rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScope operation.
     * @callback module:api/DefaultApi~updateScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} id 
     * @param {Number} scopeId 
     * @param {module:model/AddScopeRequest} addScopeRequest 
     * @param {module:api/DefaultApi~updateScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id}
     */
    updateScope(authorization, id, scopeId, addScopeRequest, callback) {
      let postBody = addScopeRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateScope");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateScope");
      }
      // verify the required parameter 'scopeId' is set
      if (scopeId === undefined || scopeId === null) {
        throw new Error("Missing the required parameter 'scopeId' when calling updateScope");
      }
      // verify the required parameter 'addScopeRequest' is set
      if (addScopeRequest === undefined || addScopeRequest === null) {
        throw new Error("Missing the required parameter 'addScopeRequest' when calling updateScope");
      }

      let pathParams = {
        'id': id,
        'scope_id': scopeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Id;
      return this.apiClient.callApi(
        '/api/2/api_authorizations/{id}/scopes/{scope_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user that you want to return.
     * @param {module:model/User} user 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.mappings Controls how mappings will be applied to the user on creation. Defaults to async.
     * @param {Boolean} opts.validatePolicy Will passwords validate against the User Policy? Defaults to true.
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateUser(authorization, userId, user, opts, callback) {
      opts = opts || {};
      let postBody = user;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'mappings': opts['mappings'],
        'validate_policy': opts['validatePolicy']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/2/users/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyEnrollment operation.
     * @callback module:api/DefaultApi~verifyEnrollmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Registration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {Number} registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor.
     * @param {module:model/VerifyEnrollmentRequest} verifyEnrollmentRequest 
     * @param {module:api/DefaultApi~verifyEnrollmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Registration>}
     */
    verifyEnrollment(authorization, userId, registrationId, verifyEnrollmentRequest, callback) {
      let postBody = verifyEnrollmentRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling verifyEnrollment");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling verifyEnrollment");
      }
      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling verifyEnrollment");
      }
      // verify the required parameter 'verifyEnrollmentRequest' is set
      if (verifyEnrollmentRequest === undefined || verifyEnrollmentRequest === null) {
        throw new Error("Missing the required parameter 'verifyEnrollmentRequest' when calling verifyEnrollment");
      }

      let pathParams = {
        'user_id': userId,
        'registration_id': registrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Registration];
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/registrations/{registration_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyEnrollmentVoiceProtect operation.
     * @callback module:api/DefaultApi~verifyEnrollmentVoiceProtectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Registration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {Number} registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor.
     * @param {module:api/DefaultApi~verifyEnrollmentVoiceProtectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Registration>}
     */
    verifyEnrollmentVoiceProtect(authorization, userId, registrationId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling verifyEnrollmentVoiceProtect");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling verifyEnrollmentVoiceProtect");
      }
      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling verifyEnrollmentVoiceProtect");
      }

      let pathParams = {
        'user_id': userId,
        'registration_id': registrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Registration];
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/registrations/{registration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyFactor operation.
     * @callback module:api/DefaultApi~verifyFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {Number} verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call.
     * @param {module:model/VerifyFactorRequest} verifyFactorRequest 
     * @param {module:api/DefaultApi~verifyFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status2}
     */
    verifyFactor(authorization, userId, verificationId, verifyFactorRequest, callback) {
      let postBody = verifyFactorRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling verifyFactor");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling verifyFactor");
      }
      // verify the required parameter 'verificationId' is set
      if (verificationId === undefined || verificationId === null) {
        throw new Error("Missing the required parameter 'verificationId' when calling verifyFactor");
      }
      // verify the required parameter 'verifyFactorRequest' is set
      if (verifyFactorRequest === undefined || verifyFactorRequest === null) {
        throw new Error("Missing the required parameter 'verifyFactorRequest' when calling verifyFactor");
      }

      let pathParams = {
        'user_id': userId,
        'verification_id': verificationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status2;
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/verifications/{verification_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyFactorSaml operation.
     * @callback module:api/DefaultApi~verifyFactorSamlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyFactorSaml200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:model/VerifyFactorSamlRequest} verifyFactorSamlRequest 
     * @param {module:api/DefaultApi~verifyFactorSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyFactorSaml200Response}
     */
    verifyFactorSaml(authorization, verifyFactorSamlRequest, callback) {
      let postBody = verifyFactorSamlRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling verifyFactorSaml");
      }
      // verify the required parameter 'verifyFactorSamlRequest' is set
      if (verifyFactorSamlRequest === undefined || verifyFactorSamlRequest === null) {
        throw new Error("Missing the required parameter 'verifyFactorSamlRequest' when calling verifyFactorSaml");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyFactorSaml200Response;
      return this.apiClient.callApi(
        '/api/2/saml_assertion/verify_factor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyFactorVoice operation.
     * @callback module:api/DefaultApi~verifyFactorVoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VerifyFactorVoice200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {Number} userId Set to the id of the user.
     * @param {Number} verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call.
     * @param {module:api/DefaultApi~verifyFactorVoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VerifyFactorVoice200ResponseInner>}
     */
    verifyFactorVoice(authorization, userId, verificationId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling verifyFactorVoice");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling verifyFactorVoice");
      }
      // verify the required parameter 'verificationId' is set
      if (verificationId === undefined || verificationId === null) {
        throw new Error("Missing the required parameter 'verificationId' when calling verifyFactorVoice");
      }

      let pathParams = {
        'user_id': userId,
        'verification_id': verificationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VerifyFactorVoice200ResponseInner];
      return this.apiClient.callApi(
        '/api/2/mfa/users/{user_id}/verifications/{verification_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
