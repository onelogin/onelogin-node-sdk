/**
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OneLoginApi);
  }
}(this, function(expect, OneLoginApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OneLoginApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateFactor', function() {
      it('should call activateFactor successfully', function(done) {
        //uncomment below and update the code to test activateFactor
        //instance.activateFactor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAccessTokenClaim', function() {
      it('should call addAccessTokenClaim successfully', function(done) {
        //uncomment below and update the code to test addAccessTokenClaim
        //instance.addAccessTokenClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addClientApp', function() {
      it('should call addClientApp successfully', function(done) {
        //uncomment below and update the code to test addClientApp
        //instance.addClientApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRoleAdmins', function() {
      it('should call addRoleAdmins successfully', function(done) {
        //uncomment below and update the code to test addRoleAdmins
        //instance.addRoleAdmins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRoleUsers', function() {
      it('should call addRoleUsers successfully', function(done) {
        //uncomment below and update the code to test addRoleUsers
        //instance.addRoleUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addScope', function() {
      it('should call addScope successfully', function(done) {
        //uncomment below and update the code to test addScope
        //instance.addScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkMappingSort', function() {
      it('should call bulkMappingSort successfully', function(done) {
        //uncomment below and update the code to test bulkMappingSort
        //instance.bulkMappingSort(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bulkSort', function() {
      it('should call bulkSort successfully', function(done) {
        //uncomment below and update the code to test bulkSort
        //instance.bulkSort(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApp', function() {
      it('should call createApp successfully', function(done) {
        //uncomment below and update the code to test createApp
        //instance.createApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthorizationServer', function() {
      it('should call createAuthorizationServer successfully', function(done) {
        //uncomment below and update the code to test createAuthorizationServer
        //instance.createAuthorizationServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEnvironmentVariable', function() {
      it('should call createEnvironmentVariable successfully', function(done) {
        //uncomment below and update the code to test createEnvironmentVariable
        //instance.createEnvironmentVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHook', function() {
      it('should call createHook successfully', function(done) {
        //uncomment below and update the code to test createHook
        //instance.createHook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMapping', function() {
      it('should call createMapping successfully', function(done) {
        //uncomment below and update the code to test createMapping
        //instance.createMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRiskRule', function() {
      it('should call createRiskRule successfully', function(done) {
        //uncomment below and update the code to test createRiskRule
        //instance.createRiskRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoles', function() {
      it('should call createRoles successfully', function(done) {
        //uncomment below and update the code to test createRoles
        //instance.createRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRule', function() {
      it('should call createRule successfully', function(done) {
        //uncomment below and update the code to test createRule
        //instance.createRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccessTokenClaim', function() {
      it('should call deleteAccessTokenClaim successfully', function(done) {
        //uncomment below and update the code to test deleteAccessTokenClaim
        //instance.deleteAccessTokenClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApp', function() {
      it('should call deleteApp successfully', function(done) {
        //uncomment below and update the code to test deleteApp
        //instance.deleteApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppParameter', function() {
      it('should call deleteAppParameter successfully', function(done) {
        //uncomment below and update the code to test deleteAppParameter
        //instance.deleteAppParameter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAuthorizationServer', function() {
      it('should call deleteAuthorizationServer successfully', function(done) {
        //uncomment below and update the code to test deleteAuthorizationServer
        //instance.deleteAuthorizationServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEnvironmentVariable', function() {
      it('should call deleteEnvironmentVariable successfully', function(done) {
        //uncomment below and update the code to test deleteEnvironmentVariable
        //instance.deleteEnvironmentVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFactor', function() {
      it('should call deleteFactor successfully', function(done) {
        //uncomment below and update the code to test deleteFactor
        //instance.deleteFactor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHook', function() {
      it('should call deleteHook successfully', function(done) {
        //uncomment below and update the code to test deleteHook
        //instance.deleteHook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMapping', function() {
      it('should call deleteMapping successfully', function(done) {
        //uncomment below and update the code to test deleteMapping
        //instance.deleteMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRiskRule', function() {
      it('should call deleteRiskRule successfully', function(done) {
        //uncomment below and update the code to test deleteRiskRule
        //instance.deleteRiskRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRole', function() {
      it('should call deleteRole successfully', function(done) {
        //uncomment below and update the code to test deleteRole
        //instance.deleteRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRule', function() {
      it('should call deleteRule successfully', function(done) {
        //uncomment below and update the code to test deleteRule
        //instance.deleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScope', function() {
      it('should call deleteScope successfully', function(done) {
        //uncomment below and update the code to test deleteScope
        //instance.deleteScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dryRunMapping', function() {
      it('should call dryRunMapping successfully', function(done) {
        //uncomment below and update the code to test dryRunMapping
        //instance.dryRunMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enrollFactor', function() {
      it('should call enrollFactor successfully', function(done) {
        //uncomment below and update the code to test enrollFactor
        //instance.enrollFactor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateMfaToken', function() {
      it('should call generateMfaToken successfully', function(done) {
        //uncomment below and update the code to test generateMfaToken
        //instance.generateMfaToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateSamlAssertion', function() {
      it('should call generateSamlAssertion successfully', function(done) {
        //uncomment below and update the code to test generateSamlAssertion
        //instance.generateSamlAssertion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateToken', function() {
      it('should call generateToken successfully', function(done) {
        //uncomment below and update the code to test generateToken
        //instance.generateToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApp', function() {
      it('should call getApp successfully', function(done) {
        //uncomment below and update the code to test getApp
        //instance.getApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthorizationServer', function() {
      it('should call getAuthorizationServer successfully', function(done) {
        //uncomment below and update the code to test getAuthorizationServer
        //instance.getAuthorizationServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAvailableFactors', function() {
      it('should call getAvailableFactors successfully', function(done) {
        //uncomment below and update the code to test getAvailableFactors
        //instance.getAvailableFactors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getClientApps', function() {
      it('should call getClientApps successfully', function(done) {
        //uncomment below and update the code to test getClientApps
        //instance.getClientApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEnrolledFactors', function() {
      it('should call getEnrolledFactors successfully', function(done) {
        //uncomment below and update the code to test getEnrolledFactors
        //instance.getEnrolledFactors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEnvironmentVariable', function() {
      it('should call getEnvironmentVariable successfully', function(done) {
        //uncomment below and update the code to test getEnvironmentVariable
        //instance.getEnvironmentVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHook', function() {
      it('should call getHook successfully', function(done) {
        //uncomment below and update the code to test getHook
        //instance.getHook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLogs', function() {
      it('should call getLogs successfully', function(done) {
        //uncomment below and update the code to test getLogs
        //instance.getLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapping', function() {
      it('should call getMapping successfully', function(done) {
        //uncomment below and update the code to test getMapping
        //instance.getMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRateLimit', function() {
      it('should call getRateLimit successfully', function(done) {
        //uncomment below and update the code to test getRateLimit
        //instance.getRateLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRiskRule', function() {
      it('should call getRiskRule successfully', function(done) {
        //uncomment below and update the code to test getRiskRule
        //instance.getRiskRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRiskScore', function() {
      it('should call getRiskScore successfully', function(done) {
        //uncomment below and update the code to test getRiskScore
        //instance.getRiskScore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRole', function() {
      it('should call getRole successfully', function(done) {
        //uncomment below and update the code to test getRole
        //instance.getRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoleAdmins', function() {
      it('should call getRoleAdmins successfully', function(done) {
        //uncomment below and update the code to test getRoleAdmins
        //instance.getRoleAdmins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoleApps', function() {
      it('should call getRoleApps successfully', function(done) {
        //uncomment below and update the code to test getRoleApps
        //instance.getRoleApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoleUsers', function() {
      it('should call getRoleUsers successfully', function(done) {
        //uncomment below and update the code to test getRoleUsers
        //instance.getRoleUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRule', function() {
      it('should call getRule successfully', function(done) {
        //uncomment below and update the code to test getRule
        //instance.getRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScoreInsights', function() {
      it('should call getScoreInsights successfully', function(done) {
        //uncomment below and update the code to test getScoreInsights
        //instance.getScoreInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserApps', function() {
      it('should call getUserApps successfully', function(done) {
        //uncomment below and update the code to test getUserApps
        //instance.getUserApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccessTokenClaims', function() {
      it('should call listAccessTokenClaims successfully', function(done) {
        //uncomment below and update the code to test listAccessTokenClaims
        //instance.listAccessTokenClaims(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listActionValues', function() {
      it('should call listActionValues successfully', function(done) {
        //uncomment below and update the code to test listActionValues
        //instance.listActionValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listActions', function() {
      it('should call listActions successfully', function(done) {
        //uncomment below and update the code to test listActions
        //instance.listActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppUsers', function() {
      it('should call listAppUsers successfully', function(done) {
        //uncomment below and update the code to test listAppUsers
        //instance.listAppUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApps', function() {
      it('should call listApps successfully', function(done) {
        //uncomment below and update the code to test listApps
        //instance.listApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAuthorizationServers', function() {
      it('should call listAuthorizationServers successfully', function(done) {
        //uncomment below and update the code to test listAuthorizationServers
        //instance.listAuthorizationServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConditionOperators', function() {
      it('should call listConditionOperators successfully', function(done) {
        //uncomment below and update the code to test listConditionOperators
        //instance.listConditionOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConditionValues', function() {
      it('should call listConditionValues successfully', function(done) {
        //uncomment below and update the code to test listConditionValues
        //instance.listConditionValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConditions', function() {
      it('should call listConditions successfully', function(done) {
        //uncomment below and update the code to test listConditions
        //instance.listConditions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConnectors', function() {
      it('should call listConnectors successfully', function(done) {
        //uncomment below and update the code to test listConnectors
        //instance.listConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEnvironmentVariables', function() {
      it('should call listEnvironmentVariables successfully', function(done) {
        //uncomment below and update the code to test listEnvironmentVariables
        //instance.listEnvironmentVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHooks', function() {
      it('should call listHooks successfully', function(done) {
        //uncomment below and update the code to test listHooks
        //instance.listHooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMappingActionValues', function() {
      it('should call listMappingActionValues successfully', function(done) {
        //uncomment below and update the code to test listMappingActionValues
        //instance.listMappingActionValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMappingActions', function() {
      it('should call listMappingActions successfully', function(done) {
        //uncomment below and update the code to test listMappingActions
        //instance.listMappingActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMappingConditionOperators', function() {
      it('should call listMappingConditionOperators successfully', function(done) {
        //uncomment below and update the code to test listMappingConditionOperators
        //instance.listMappingConditionOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMappingConditionValues', function() {
      it('should call listMappingConditionValues successfully', function(done) {
        //uncomment below and update the code to test listMappingConditionValues
        //instance.listMappingConditionValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMappingConditions', function() {
      it('should call listMappingConditions successfully', function(done) {
        //uncomment below and update the code to test listMappingConditions
        //instance.listMappingConditions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMappings', function() {
      it('should call listMappings successfully', function(done) {
        //uncomment below and update the code to test listMappings
        //instance.listMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRiskRules', function() {
      it('should call listRiskRules successfully', function(done) {
        //uncomment below and update the code to test listRiskRules
        //instance.listRiskRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoles', function() {
      it('should call listRoles successfully', function(done) {
        //uncomment below and update the code to test listRoles
        //instance.listRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRules', function() {
      it('should call listRules successfully', function(done) {
        //uncomment below and update the code to test listRules
        //instance.listRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listScopes', function() {
      it('should call listScopes successfully', function(done) {
        //uncomment below and update the code to test listScopes
        //instance.listScopes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeClientApp', function() {
      it('should call removeClientApp successfully', function(done) {
        //uncomment below and update the code to test removeClientApp
        //instance.removeClientApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeRoleAdmins', function() {
      it('should call removeRoleAdmins successfully', function(done) {
        //uncomment below and update the code to test removeRoleAdmins
        //instance.removeRoleAdmins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeRoleUsers', function() {
      it('should call removeRoleUsers successfully', function(done) {
        //uncomment below and update the code to test removeRoleUsers
        //instance.removeRoleUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeToken', function() {
      it('should call revokeToken successfully', function(done) {
        //uncomment below and update the code to test revokeToken
        //instance.revokeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRoleApps', function() {
      it('should call setRoleApps successfully', function(done) {
        //uncomment below and update the code to test setRoleApps
        //instance.setRoleApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trackEvent', function() {
      it('should call trackEvent successfully', function(done) {
        //uncomment below and update the code to test trackEvent
        //instance.trackEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccessTokenClaim', function() {
      it('should call updateAccessTokenClaim successfully', function(done) {
        //uncomment below and update the code to test updateAccessTokenClaim
        //instance.updateAccessTokenClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApp', function() {
      it('should call updateApp successfully', function(done) {
        //uncomment below and update the code to test updateApp
        //instance.updateApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAuthorizationServer', function() {
      it('should call updateAuthorizationServer successfully', function(done) {
        //uncomment below and update the code to test updateAuthorizationServer
        //instance.updateAuthorizationServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClientApp', function() {
      it('should call updateClientApp successfully', function(done) {
        //uncomment below and update the code to test updateClientApp
        //instance.updateClientApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEnvironmentVariable', function() {
      it('should call updateEnvironmentVariable successfully', function(done) {
        //uncomment below and update the code to test updateEnvironmentVariable
        //instance.updateEnvironmentVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHook', function() {
      it('should call updateHook successfully', function(done) {
        //uncomment below and update the code to test updateHook
        //instance.updateHook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMapping', function() {
      it('should call updateMapping successfully', function(done) {
        //uncomment below and update the code to test updateMapping
        //instance.updateMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRiskRule', function() {
      it('should call updateRiskRule successfully', function(done) {
        //uncomment below and update the code to test updateRiskRule
        //instance.updateRiskRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRole', function() {
      it('should call updateRole successfully', function(done) {
        //uncomment below and update the code to test updateRole
        //instance.updateRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRule', function() {
      it('should call updateRule successfully', function(done) {
        //uncomment below and update the code to test updateRule
        //instance.updateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScope', function() {
      it('should call updateScope successfully', function(done) {
        //uncomment below and update the code to test updateScope
        //instance.updateScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyEnrollment', function() {
      it('should call verifyEnrollment successfully', function(done) {
        //uncomment below and update the code to test verifyEnrollment
        //instance.verifyEnrollment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyEnrollmentVoiceProtect', function() {
      it('should call verifyEnrollmentVoiceProtect successfully', function(done) {
        //uncomment below and update the code to test verifyEnrollmentVoiceProtect
        //instance.verifyEnrollmentVoiceProtect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyFactor', function() {
      it('should call verifyFactor successfully', function(done) {
        //uncomment below and update the code to test verifyFactor
        //instance.verifyFactor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyFactorSaml', function() {
      it('should call verifyFactorSaml successfully', function(done) {
        //uncomment below and update the code to test verifyFactorSaml
        //instance.verifyFactorSaml(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyFactorVoice', function() {
      it('should call verifyFactorVoice successfully', function(done) {
        //uncomment below and update the code to test verifyFactorVoice
        //instance.verifyFactorVoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
